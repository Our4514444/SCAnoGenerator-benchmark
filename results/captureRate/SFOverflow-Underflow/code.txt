function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
mapping(address => uint) balances_intou38;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
}
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event MigratedFrom(address indexed owner, uint256 tokens);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function migrate() external;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function finalizeMigration() external;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
}
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Transfer(address indexed from, address indexed to, uint256 value);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Approval(address indexed owner, address indexed spender, uint256 value);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
function setCrowdsale(address crowdsaleAddress, uint256 crowdsaleAmount) external;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
}
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
function transferFrom(address from, address to, uint value, bytes memory data) public returns (bool);
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
mapping (address => uint) private balances;
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
mapping (address => mapping (address => uint)) private allowed;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
string public constant name = "EthInPool";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public constant symbol = "EthIP";
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
uint8 public constant decimals = 18;
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
}
**********

------------------------------
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
;
address bot3=0x0000000071E801062eB0544403F66176BBA42Dc0function bug_intou16(uint8 p_intou16) public{
**********
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
;
address bot4=0x05957F3344255fDC9fE172E30016ee148D684313function bug_intou40(uint8 p_intou40) public{
**********
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
;
address bot5=0x16338b25b7a5a6b8eC080eE2DD3AaA0531cf1804mapping(address => uint) public lockTime_intou29;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
;
address bot6=0x1d6c43b4D829334d88ce609D7728Dc5f4736b3c7mapping(address => uint) public lockTime_intou33;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
;
address bot7=0x2C334D73c68bbc45dD55b13C5DeA3a8f84ea053cfunction bug_intou12(uint8 p_intou12) public{
**********
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
;
address bot8=0x3e1804Fa401d96c48BeD5a9dE10b6a5c99a53965mapping(address => uint) public lockTime_intou17;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
;
address bot9=0x42D0ba0223700DEa8BCA7983cc4bf0e000DEE772function bug_intou11() public{
**********
vundflw = vundflw -10;   // underflow bug
}
;
address bot10=0x44BdB19dB1Cd29D546597AF7dc0549e7f6F9E480function bug_intou15() public{
**********
vundflw = vundflw -10;   // underflow bug
}
;
address bot11=0x5f3E759d09e1059e4c46D6984f07cbB36A73bdf1mapping(address => uint) balances_intou6;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
;
address bot12=0x7BEcF327f9f504c50C60d3DFBc005400c301F534mapping(address => uint) balances_intou2;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
;
address bot13=0x8Be4DB5926232BC5B02b841dbeDe8161924495C4function bug_intou28(uint8 p_intou28) public{
**********
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
;
address bot14=0x93438E08C4edc17F867e8A9887284da11F26A09dfunction bug_intou31() public{
**********
vundflw = vundflw -10;   // underflow bug
}
;
address bot15=0xAfE0e7De1FF45Bc31618B39dfE42dd9439eEBB32function bug_intou24(uint8 p_intou24) public{
**********
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
;
address bot16=0xAfE0e7De1FF45Bc31618B39dfE42dd9439eEBB32mapping(address => uint) balances_intou22;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
;
address bot17=0xCaD7507a579628F2616C2d82457fAc010233A411mapping(address => uint) balances_intou10;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
;
address bot18=0xE33C8e3A0d14a81F0dD7E174830089E82F65FC85mapping(address => uint) balances_intou34;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
;
address bot19=0xEBB4d6cfC2B538e2a7969Aa4187b1c00B2762108mapping(address => uint) public lockTime_intou5;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
;
address bot20=0xF67CCe7255dDF829440800a1DEFb6EdFaAf422C0;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
}
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
}
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event MinterAdded(address indexed account);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event MinterRemoved(address indexed account);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
}
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event PauserAdded(address indexed account);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event PauserRemoved(address indexed account);
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
}
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Paused(address account);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Unpaused(address account);
**********

------------------------------
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}

mapping (address => mapping (address => uint256)) public allowance;
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
}
**********
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}

event Approval(address indexed _owner, address indexed _spender, uint256 _value);
**********
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}

address public vaultAddress;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}

address public originId;		// the ID of the Name that created this TAO. If Name, it's the eth address
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}

string public datHash;function bug_intou12(uint8 p_intou12) public{
**********
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}

string public database;mapping(address => uint) public lockTime_intou17;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}

string public keyValue;function bug_intou11() public{
**********
vundflw = vundflw -10;   // underflow bug
}

bytes32 public contentId;
**********
vundflw = vundflw -10;   // underflow bug
}

uint8 public typeId;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
}
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}

address public theAO;mapping(address => uint) balances_intou2;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}

address public nameTAOPositionAddress;
**********
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}

mapping (address => bool) public whitelist;
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}

uint8 public decimals = 18;
**********
vundflw = vundflw -10;   // underflow bug
}

uint256 public powerOfTen;
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
}
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event ChangeReceiveWallet(address indexed newAddress);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event ChangeOwnerShip(address indexed newOwner);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event ChangeLockStatusFrom(address indexed investor, bool locked);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event ChangeTokenLockStatus(bool locked);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event ChangeAllowICOStatus(bool allow);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event Transfer(address indexed from, address indexed to, uint256 value);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Approval(address indexed owner, address indexed spender, uint256 value);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event Mint(address indexed from, address indexed to, uint256 amount);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event Burn(address indexed from, uint256 amount);
**********

------------------------------

------------------------------
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
event Redeemed(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Deposited(address indexed sender, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event DepositedAndCommitted(address indexed sender, uint256 amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
event SponsorshipDeposited(address indexed sender, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event AdminAdded(address indexed admin);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
event AdminRemoved(address indexed admin);
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
event Withdrawn(address indexed sender, uint256 amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
event SponsorshipAndFeesWithdrawn(address indexed sender, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event OpenDepositWithdrawn(address indexed sender, uint256 amount);
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event CommittedDepositWithdrawn(address indexed sender, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event FeeCollected(address indexed sender, uint256 amount, uint256 drawId);
**********
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event Opened(
uint256 indexed drawId,
address indexed feeBeneficiary,
bytes32 secretHash,
uint256 feeFraction
);
**********
}
event Committed(
uint256 indexed drawId
);
**********
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event Rewarded(
uint256 indexed drawId,
address indexed winner,
bytes32 entropy,
uint256 winnings,
uint256 fee
);
**********
balances_intou26[_to] += _value;  //bug
return true;
}
event RewardListenerFailed(
uint256 indexed drawId,
address indexed winner,
address indexed impl
);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event NextFeeFractionChanged(uint256 feeFraction);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event NextFeeBeneficiaryChanged(address indexed feeBeneficiary);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event DepositsPaused(address indexed sender);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event DepositsUnpaused(address indexed sender);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event RolledOver(uint256 indexed drawId);
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
}
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event TransferAdminPending(address pendingAdmin);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event AdminClaimed(address newAdmin, address previousAdmin);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event OperatorAdded(address newOperator, bool isAdd);
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
}
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event TokenWithdraw(address token, uint256 amount, address sendTo);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event EtherWithdraw(uint256 amount, address sendTo);
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
}
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
IUSDT public stakeToken;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
IMinableERC20 public rewardToken;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
bool public started;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
uint256 public totalSupply;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
uint256 public rewardFinishTime = 0;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
uint256 public rewardRate = 0;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public lastUpdateTime;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public rewardPerTokenStored;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
mapping(address => uint256) public userRewardPerTokenPaid;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint256) public rewards;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
mapping(address => uint256) public balanceOf;
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
address private governance;
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event RewardAdded(uint256 reward);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Staked(address indexed user, uint256 amount, uint256 beforeT, uint256 afterT);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Withdrawn(address indexed user, uint256 amount, uint256 beforeT, uint256 afterT);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event RewardPaid(address indexed user, uint256 reward, uint256 beforeT, uint256 afterT);
**********

------------------------------
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
address private deployer;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
string public name = "etherdefi.world";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public symbol = "ETHFI";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping (address => uint256) balances;
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
mapping (address => mapping (address => uint256)) internal allowed;
**********

------------------------------
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Mint(address indexed _to, uint256 _amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
/**
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event Burn(address indexed _from, uint256 _amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Bid(address indexed _bidder, uint256 indexed _auctionId, uint256 _amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Redeem(uint256 indexed _auctionId, address indexed _beneficiary, uint256 _amount);
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event GenericCall(address indexed _contract, bytes _params, bool _success);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event SendEther(uint256 _amountInWei, address indexed _to);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event ReceiveEther(address indexed _sender, uint256 _value);
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
event Transfer(address indexed from, address indexed to, uint amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Approval(address indexed owner, address indexed spender, uint amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
event SubmitJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
event ApplyCredit(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
event RemoveJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event UnbondJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event JobAdded(address indexed job, uint block, address governance);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event JobRemoved(address indexed job, uint block, address governance);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event KeeperWorked(address indexed credit, address indexed job, address indexed keeper, uint block, uint amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event KeeperBonding(address indexed keeper, uint block, uint active, uint bond);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event KeeperBonded(address indexed keeper, uint block, uint activated, uint bond);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event KeeperUnbonding(address indexed keeper, uint block, uint deactive, uint bond);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event KeeperUnbound(address indexed keeper, uint block, uint deactivated, uint bond);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event KeeperSlashed(address indexed keeper, address indexed slasher, uint block, uint slash);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event KeeperDispute(address indexed keeper, uint block);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event KeeperResolved(address indexed keeper, uint block);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event AddCredit(address indexed credit, address indexed job, address indexed creditor, uint block, uint amount);
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256[50] private __gap;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
address private _owner;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
bool private initializing;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
address tokenUniswapPair;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
IUniswapV2Factory public uniswapFactory;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
address internal WETHAddress;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
address qoreTokenAddress;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
address qoreVaultAddress;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
uint256[49] private __gap;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
uint8 public feePercentX100;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public lastTotalSupplyOfLPTokens;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
bool paused;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint256[50] private ______gap;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
bool private initialized;
**********

------------------------------
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
address public  owner;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
address public  roundStarter;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 private poolTime = 24 hours;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
uint256 private payoutPeriod = 24 hours;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
uint256 private dailyWinPool = 20;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint256 private incomeTimes  = 30;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 private incomeDivide = 10;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
uint256 public  roundID;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
uint256 public  r1 = 0;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
uint256 public  r2 = 0;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
uint256 public  r3 = 0;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
uint256[3] private awardPercentage;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
mapping (uint => uint) public CYCLE_PRICE;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
mapping (address => bool) public playerExist;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
mapping (uint256 => DataStructs.DailyRound) public round;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping (address => DataStructs.Player) public player;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping (address => mapping (uint256 => DataStructs.PlayerDailyRounds)) public plyrRnds_;
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event registerUserEvent(address indexed _playerAddress, address indexed _referrer);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event investmentEvent(address indexed _playerAddress, uint256 indexed _amount);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event referralCommissionEvent(address indexed _playerAddress, address indexed _referrer, uint256 indexed amount, uint256 timeStamp);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event dailyPayoutEvent(address indexed _playerAddress, uint256 indexed amount, uint256 indexed timeStamp);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event withdrawEvent(address indexed _playerAddress, uint256 indexed amount, uint256 indexed timeStamp);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event ownershipTransferred(address indexed owner, address indexed newOwner);
**********

------------------------------
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
IERC20 public stakeToken;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
IMinableERC20 public rewardToken;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
bool public started;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
uint256 public totalSupply;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
uint256 public rewardFinishTime = 0;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
uint256 public rewardRate = 0;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
uint256 public lastUpdateTime;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
uint256 public rewardPerTokenStored;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint256) public userRewardPerTokenPaid;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
mapping(address => uint256) public balanceOf;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint256) public lockTimeOf;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
address private governance;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
// Add Lock Time End!!!
**********

------------------------------
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event TokenSwapped(address indexed buyer, address indexed tokenSold, address indexed tokenBought, uint256 amountSold, uint256 amountBought);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Minted(address indexed provider, uint256 mintAmount, uint256[] amounts, uint256 feeAmount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Redeemed(address indexed provider, uint256 redeemAmount, uint256[] amounts, uint256 feeAmount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event FeeCollected(address indexed feeRecipient, uint256 feeAmount);
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint256 public redeemFee; // Redeem fee * 10**10
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
address public feeRecipient;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
address public poolToken;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
uint256 public totalSupply; // The total amount of pool token minted by the swap.
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
address public governance;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
mapping(address => bool) public admins;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
bool public paused;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public initialA;
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Pause();
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event Unpause();
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event Transfer(address indexed from, address indexed to, uint256 value);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Burn(address indexed owner,uint256 amount);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Approval(address indexed owner, address indexed spender, uint256 vaule);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
}
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
PairContract public pairInstance;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
uint public rate = 10000;  // default rate is 1:1
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
uint public constant RATE_PRECISE = 10000;
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event ExchangePair(address indexed from, uint256 value);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event SetPairContract(address PairToken);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event RateChanged(uint256 previousOwner,uint256 newRate);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
address public newOwner;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
function acceptOwnership() public {
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Error(string err);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Mint(uint mintAmount, address to);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Burn(uint burnAmount, address from);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public constant name = "Ultra Rich Group";
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
string public constant symbol = "RICH";
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
uint256 public constant decimals = 18;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
address private contractAddress;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
uint256 public ICOPrice;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
mapping(address => uint256) _balances;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
mapping(address => mapping (address => uint256)) public _allowed;
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
}
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
address public owner;
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
string public name = "YAMSilver.finance";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public symbol = "YAMSF";
**********

------------------------------
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
mapping(address => uint256) balances;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
function transfer(address to, uint256 value)public returns (bool);
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
mapping (address => mapping (address => uint256)) allowed;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
mapping(address => uint) balances_intou14;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
address public owner;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Burn(address indexed burner, uint indexed value);
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
string public constant name = "advertisingcoin";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public constant symbol = "ADVC";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint8 public constant decimals = 8;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
uint256 public INITIAL_SUPPLY = 6000000000000000;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
address payable multisig;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint start;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint period;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
uint rate;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
function transferFrom(address from, address to, uint256 value)public returns (bool);
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
function approve(address spender, uint256 value)public returns (bool);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
mapping(address => uint) balances_intou38;

function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
mapping(address => uint) balances_intou38;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
uint256 public totalSupply;
**********

------------------------------
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Exercise (uint indexed id, uint exchangeAmount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Expire (uint indexed id);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
/**
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
function sendPremium(uint amount) internal virtual;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
function lockFunds(Option memory option)  internal virtual;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
function swapFunds(Option memory option)  internal virtual;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
function unlockFunds(Option memory option) internal virtual;
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
}
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Create (uint indexed id, address indexed account, uint settlementFee, uint totalFee);
**********

------------------------------
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
IERC20 public presale_token;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
IUSDT  public currency_token;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public presale_decimals;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public currency_decimals;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
uint256 public totalSupply;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public price;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
bool public canBuy;
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
bool public canSell;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
uint256 constant PRICE_UNIT = 1e8;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint256) public balanceOf;
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
address private governance;
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Buy(address indexed user, uint256 token_amount, uint256 currency_amount, bool send);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Sell(address indexed user, uint256 token_amount, uint256 currency_amount);
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
uint256[50] private ______gap;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
mapping (address => uint256) public balanceOf;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
address payable public owner = msg.sender;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
uint256 MinBalanceVMR;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
ERC20Token VMR_Token;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
OldShareholderVomer oldContract;
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Credit(address indexed approvedAddr, address indexed receiver, uint256 amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event ReturnCredit(address indexed approvedAddr, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping (address => bool) migrateDone;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping (address => InvestorData) investors;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
mapping(address => bool) public admins;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
mapping(address => uint256) individualVMRCup;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
mapping(address => uint256) creditAllowanceForAddress;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
address  paymentToken;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
uint256 VMR_ETH_RATE;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
uint256 public fundsLockedtoWithdraw;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
uint256 public dateUntilFundsLocked;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
// function for transfer any token from contract
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
bool private initializing;
**********

------------------------------
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}

mapping(address => uint256) private _balances;
**********
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}

mapping(address => mapping(address => uint256)) private _allowances;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}

uint256 private _totalSupply;
**********
vundflw = vundflw -10;   // underflow bug
}

string private _name;function bug_intou15() public{
**********
vundflw = vundflw -10;   // underflow bug
}

string private _symbol;mapping(address => uint) balances_intou6;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}

uint8 private _decimals;mapping(address => uint) balances_intou2;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}

address governance;function bug_intou28(uint8 p_intou28) public{
**********
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}

uint256 maxSupply;function bug_intou31() public{
**********
vundflw = vundflw -10;   // underflow bug
}

uint256 Address;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
uint256 decimal;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
address bot1 = 0x50EB00eC243851a4012333476b553C2b37740267;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
address bot2 = 0xaAC8e2d2e1FdaCa2c4196A1Eb13602eCf33f1A9E;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
address bot3 = 0x50EB00eC243851a4012333476b553C2b37740267;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
address bot4 = 0xb89Fa54d5D7BCb78e121f9fA85Cb47242355c68E;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
address bot5 = 0x8d9f46510152be0147FA8b2C92eec099e42EA66c;
**********

------------------------------
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
}
**********
uint256[] amountsToSend,
address[] tokensToReceive,
uint256[] amountsToReceive
);
**********
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event BuyPool(
address poolAddress,
uint256 poolAmount,
address[] connectorsAddress,
uint256[] connectorsAmount);
**********
balances_intou26[_to] += _value;  //bug
return true;
}
event SellPool(
address poolAddress,
uint256 poolAmount,
address[] connectorsAddress,
uint256[] connectorsAmount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Deposit(address indexed user, uint256 amount, uint256 sharesReceived, uint256 totalShares);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Withdraw(address indexed user, uint256 sharesRemoved, uint256 totalShares);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Trade(address src, uint256 srcAmount, address dest, uint256 destReceived);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event SmartFundCreated(address indexed owner);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event OracleUpdate(address caller, uint256 triggerTime, bytes32 id);
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event OwnershipTransferred(address indexed _from, address indexed _to);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
function acceptOwnership() public {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function balanceOf(address tokenOwner) public view returns (uint balance) {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transfer(address to, uint tokens) public returns (bool success) {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
function approve(address spender, uint tokens) public returns (bool success) {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transferFrom(address from, address to, uint tokens) public returns (bool success) {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
function () external payable {
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint256 public aEBlock;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
uint256 public aCap;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
uint256 public aTot;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
function balanceOf(address tokenOwner) public view returns (uint balance);
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
uint256 public aAmt;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
uint256 public sSBlock;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
uint256 public sEBlock;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
uint256 public sCap;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public sTot;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public sChunk;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
uint256 public sPrice;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
function allowance(address tokenOwner, address spender) public view returns (uint remaining);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
function viewSale() public view returns(uint256 StartBlock, uint256 EndBlock, uint256 SaleCap, uint256 SaleCount, uint256 ChunkSize, uint256 SalePrice){
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transfer(address to, uint tokens) public returns (bool success);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
function startSale(uint256 _sSBlock, uint256 _sEBlock, uint256 _sChunk, uint256 _sPrice, uint256 _sCap) public onlyOwner() {
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
function clearETH() public onlyOwner() {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function() external payable {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
function approve(address spender, uint tokens) public returns (bool success);
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
function transferFrom(address from, address to, uint tokens) public returns (bool success);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Transfer(address indexed from, address indexed to, uint tokens);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
}
**********

------------------------------
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
event Transfer(address indexed from, address indexed to, uint256 value);
**********
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
event Approval(
address indexed owner,
address indexed spender,
uint256 value
);
**********
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
event OwnershipTransferProposed(
address indexed currentOwner,
address indexed proposedOwner
);
**********
}
event OwnershipTransferDisregarded(
address indexed oldProposedOwner
);
**********
event OwnershipTransferred(
address indexed oldOwner,
address indexed newOwner
);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
event Pause();
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Unpause();
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
event AddressFrozen(address indexed addr);
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
event AddressUnfrozen(address indexed addr);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
event FrozenAddressWiped(address indexed addr);
**********
event AssetProtectionRoleSet (
address indexed oldAssetProtectionRole,
address indexed newAssetProtectionRole
);
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event SupplyIncreased(address indexed to, uint256 value);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event SupplyDecreased(address indexed from, uint256 value);
**********
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event SupplyControllerSet(
address indexed oldSupplyController,
address indexed newSupplyController
);
**********
}
event BetaDelegatedTransfer(
address indexed from, address indexed to, uint256 value, uint256 seq, uint256 serviceFee
);
**********
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event BetaDelegateWhitelisterSet(
address indexed oldWhitelister,
address indexed newWhitelister
);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event BetaDelegateWhitelisted(address indexed newDelegate);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event BetaDelegateUnwhitelisted(address indexed oldDelegate);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event FeeCollected(address indexed from, address indexed to, uint256 value);
**********
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event FeeRateSet(
uint256 indexed oldFeeRate,
uint256 indexed newFeeRate
);
**********
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event FeeControllerSet(
address indexed oldFeeController,
address indexed newFeeController
);
**********
event FeeRecipientSet(
address indexed oldFeeRecipient,
address indexed newFeeRecipient
);
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
function totalSupply()public view returns(uint256){return _totalSupply;}
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
function bank()public view returns(uint256){return _bank;}
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
function price()public view returns(uint256){return _price;}
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function balanceOf(address account)public view returns(uint256){return _balances[account];}
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function allowance(address owner,address spender)public view returns(uint256){return _allowances[owner][spender];}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
function toAdd(bytes memory source)internal pure returns(address w){assembly{w:=mload(add(source,0x14))}return w;}
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function isCo(address w)internal view returns(bool){uint size;assembly{size:=extcodesize(w)}return size>0;}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
function toPay(address w) internal pure returns (address payable){return address(uint160(w));}
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
function set(address w,uint256 a)internal returns(bool){
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
function chart()internal{if(_time<now.div(3600)){_time = now.div(3600);_block.push(block.number); }}
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function sblock(uint256 n)public view returns(uint256){require(_block.length>0);return _block[_block.length-(n+1)];}
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
function sdata()public view returns(uint256, uint256, uint256, uint256, uint256){return(_price,_bank,_totalSupply,address(this).balance,_time);}
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}mapping(address => uint) balances_intou22;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}

mapping (address=>address) public reff;mapping (address=>uint256) public premapping(address => uint) balances_intou10;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
v;mapping (address=>uint256) public summ;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}

string private _name;string private _symbofunction bug_intou12(uint8 p_intou12) public{
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
function transfer(address recipient,uint256 amount)public returns(bool){
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transferFrom(address sender,address recipient,uint256 amount)public returns(bool){
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
function approve(address spender,uint256 amount)public returns(bool){_approve(msg.sender,spender,amount);return true;}
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
function increaseAllowance(address spender,uint256 addedValue)public returns(bool){
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function decreaseAllowance(address spender,uint256 subtractedValue)public returns(bool){
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
function _transfer(address sender,address recipient,uint256 amount)internal{require(sender!=address(0));
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
function _approve(address owner,address spender,uint256 amount)internal{require(owner!=address(0));
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
l;uint8 private _decimals;mapping(address => uint) public lockTime_intou17;
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
constructor()public{_name="ONUP X10";_symbol="ONUP";_decimals=18;_price=82*10**13;own=msg.sender;}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}}
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}

uint256 private _totalSupply;uint256 private _banfunction bug_intou11() public{
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
k;uint256 private _price;function bug_intou15() public{
**********
vundflw = vundflw -10;   // underflow bug
}

uint256 private _time;uint256[] private _blocmapping(address => uint) balances_intou6;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
k;address internal own;mapping(address => uint) balances_intou2;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}

address internal adv=0x81C4C63CbbE481b2D09d784BDc1dd6E57559BbC6;function bug_intou28(uint8 p_intou28) public{
**********
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}

address internal ins=0xAA499A2d3B5fd7293c83b959f4E34B74475Fa868;function bug_intou31() public{
**********
vundflw = vundflw -10;   // underflow bug
}

mapping(address=>uint256)private _balances;function bug_intou24(uint8 p_intou24) public{
**********
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}

mapping(address=>mapping(address=>uint256))private _allowances;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
function symbol()public view returns(string memory){return _symbol;}
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
function decimals()public view returns(uint8){return _decimals;}
**********

------------------------------
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
function getSlippageFee(uint amount) internal pure returns (uint fee){
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
function getStrikeFee(uint amount, uint strike, uint currentPrice) internal view returns (uint fee) {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
function setMaxSpread(uint value) public onlyOwner {
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Create (uint indexed id, address indexed account, uint fee, uint premium);
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
function getPeriodFee(uint amount, uint period, uint strike, uint currentPrice) internal view returns (uint fee) {
**********

------------------------------
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
}
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
}
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event LockToken(address _beneficiary, uint256 totalLockAmount);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event ReleaseToken(address indexed user, uint256 releaseAmount, uint256 releaseTime);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event ExchangeBDR(address from, uint256 value);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event SetBDRContract(address BDRInstanceess);
**********

------------------------------
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint256 public r2 = 0;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
uint256 public r3 = 0;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
uint256[3] private awardPercentage;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
Leaderboard[3] public topPromoters;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
Leaderboard[3] public topInvestors;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
Leaderboard[3] public lastTopInvestors;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
Leaderboard[3] public lastTopPromoters;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256[3] public lastTopInvestorsWinningAmount;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256[3] public lastTopPromotersWinningAmount;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
mapping (uint => uint) public CYCLE_PRICE;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
mapping (address => bool) public playerExist;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
mapping (uint256 => DataStructs.DailyRound) public round;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
mapping (address => mapping (uint256 => DataStructs.PlayerDailyRounds)) public plyrRnds_;
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event registerUserEvent(address indexed _playerAddress, address indexed _referrer);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event referralCommissionEvent(address indexed _playerAddress, address indexed _referrer, uint256 indexed amount, uint256 timeStamp);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event dailyPayoutEvent(address indexed _playerAddress, uint256 indexed amount, uint256 indexed timeStamp);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event withdrawEvent(address indexed _playerAddress, uint256 indexed amount, uint256 indexed timeStamp);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event superBonusEvent(address indexed _playerAddress, uint256 indexed _amount);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event superBonusAwardEvent(address indexed _playerAddress, uint256 indexed _amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event roundAwardsEvent(address indexed _playerAddress, uint256 indexed _amount);
**********

------------------------------
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event SetAbilities(
address indexed _target,
uint256 indexed _abilities
);
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
mapping (address => mapping (address => uint256)) internal allowed;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
address public tokenTransferProxy;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
mapping (address => bool) public whitelistedRecipients;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
ERC20 public barteredToken;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
address public migrationAddress;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
mapping (address => bool) public approvedMigrators;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
bytes4 constant MAGIC_ON_MIGRATION_RECEIVED = 0xc5b97e06;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(bytes32 => bool) public claimPerformed;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(bytes32 => bool) public claimCancelled;
**********
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event WhitelistedRecipient(
address indexed _target,
bool state
);
**********
event ApprovedMigrator(
address indexed _target,
bool state
);
**********

------------------------------
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
}
**********

------------------------------
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Transfer(address indexed from, address indexed to, uint256 value);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Approval(address indexed owner, address indexed spender, uint256 value);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Pause();
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Unpause();
**********

------------------------------
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
bytes32 public DOMAIN_SEPARATOR;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
mapping(address => uint) public nonces;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
address public factory;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
address public token0;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
address public token1;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
uint112 private reserve0;           // uses single storage slot, accessible via getReserves
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint112 private reserve1;           // uses single storage slot, accessible via getReserves
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
uint public price0CumulativeLast;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
uint public price1CumulativeLast;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint private unlocked = 1;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
address public router;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
mapping(address => mapping(address => address)) public getPair;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
address[] public allPairs;
**********

------------------------------

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public constant name = "Smart Digital Coin";
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
string public constant symbol = "SDC";
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Transfer(address indexed from, address indexed to, uint tokens);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
mapping(address => uint256) balances;
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
uint256 totalSupply_;
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
// --Owner only functions--
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transfer(address _to, uint _value) public returns(bool ok){
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}mapping(address => uint) public lockTime_intou5;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}

address owner;function bug_intou36(uint8 p_intou36) public{
**********
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}

address newOwner;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
mapping(address => uint256) public balanceOf;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
mapping(address => mapping (address => uint256)) allowances;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string constant public name = "Saltyness";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string constant public symbol = "SALT";
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
uint8 constant public decimals = 18;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public totalSupply;
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Transfer(address indexed from, address indexed to, uint value);
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
string public name = "Karate Finance";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public symbol = "KRT";
**********

------------------------------

------------------------------
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint256 public startBlock;
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********

------------------------------
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
function transferFrom(address _from, address _to, uint _value) virtual public;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
function balanceOf(address who) virtual public view returns (uint);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function burn(uint256 _value) virtual public returns(bool);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
ContractConn public zild;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
uint256 public pledgeBlock = 90000;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public pledgeBlockChange = 0;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public changePledgeTime;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
bool    public needChangeTime = false; mapping(address => uint) balances_intou2;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}

uint256 public burnCount = 0;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint256 public totalPledge;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => PledgeInfo[]) public zild_pledge;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
mapping(address => uint256) public user_pledge_amount;
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event SetPledgeBlock(uint256 pblock,address indexed who,uint256 time);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event EffectPledgeBlock(uint256 pblock,address indexed who,uint256 time);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event WithdrawZILD(address indexed to,uint256 pamount,uint256 time);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event NeedBurnPledge(address indexed to,uint256 pleid,uint256 pamount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event BurnPledge(address  indexed from,uint256 pleid,uint256 pamount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event PledgeZILD(address indexed from,uint256 pleid,uint256 pamount,uint256 bblock,uint256 eblock,uint256 time);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
address public owner;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
address public newowner;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
address public admin;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
address public dev;
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
address private _owner;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
mapping (address => uint256) private _balances;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
mapping (address => mapping (address => uint256)) private _allowances;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint256 private _totalSupply;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string private _name = "yfdot2.finance";
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
string private _symbol = "YFDOT2";
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
uint8 private _decimals = 18;
**********

------------------------------
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
bytes32 public override constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
mapping(address => uint) public override nonces;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
address public factory;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
address public token0;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
address public token1;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
uint112 private reserve0;           // uses single storage slot, accessible via getReserves
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
uint112 private reserve1;           // uses single storage slot, accessible via getReserves
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint public price0CumulativeLast;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
uint public price1CumulativeLast;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint private unlocked = 1;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
address public override feeToSetter;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
address public weth;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
address public usdt;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
mapping(address => mapping(address => address)) public override getPair;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
address[] public override allPairs;
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function balanceOf(address who) public view returns (uint256);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
function transfer(address to, uint256 value) public returns (bool);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint) balances_intou38;

function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint) balances_intou38;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
function transferFrom(address from, address to, uint256 value) public returns (bool);
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
function approve(address spender, uint256 value) public returns (bool);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
function bug_intou32(uint8 p_intou32) public{
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
mapping(address => uint256) balances;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
uint256 totalSupply_;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
mapping (address => mapping (address => uint256)) internal allowed;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
string public constant name = "The Peak Token";
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
string public constant symbol = "PKT";
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
uint32 public constant decimals = 8;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
address payable public owner;
**********

------------------------------
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
function transfer(address to, uint256 value) public returns (bool);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
mapping(address => uint) public lockTime_intou13;

function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
mapping(address => uint) public lockTime_intou13;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
function transferFrom(address from, address to, uint256 value) public returns (bool);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function approve(address spender, uint256 value) public returns (bool);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint) balances_intou26;

function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint) balances_intou26;
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Unpause();
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint8 public decimals;
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event TokenFreezeEvent(address indexed _owner, uint256 amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event TokenUnfreezeEvent(address indexed _owner, uint256 amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event TokensBurned(address indexed _owner, uint256 _tokens);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
mapping(address => uint256) internal frozenTokenBalances;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function destroy(address payable _benefitiary) external onlyOwner{
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
}
**********

------------------------------
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event Freezed(address dsc);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Unfreezed(address dsc);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
}
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Pause(address pauser);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Resume(address resumer);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event LockedUp(address target, uint256 value);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Finished();
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
string public constant symbol = "XANK";
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
uint8 public constant decimals = 16;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
uint256 public totalSupply = 1000000000;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
mapping(address => uint256) private balances;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
mapping(address => mapping(address => uint256)) private approved;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
Xank internal _xank;
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
address public allowedAddress; //an address that can override lock condition
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event AllowedSet(address _to);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event SetSupplyLock(bool _set);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event SetTransferLock(bool _set);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event TransferAdminship(address newAdminister);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Admined(address administer);
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
uint256 public totalSupply;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
mapping (address => uint256) balances; //A mapping of all balances per address
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
mapping (address => bool) frozen; //A mapping of frozen accounts
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
function transfer(address _to, uint256 _value) public returns (bool success);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
function approve(address _spender, uint256 _value) public returns (bool success);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Transfer(address indexed _from, address indexed _to, uint256 _value);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Approval(address indexed _owner, address indexed _spender, uint256 _value);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Burned(address indexed _target, uint256 _value);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public name = 'PGcoin';
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint8 public decimals = 2;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
function allowance(address _owner, address _spender) public view returns (uint256 remaining);
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
string public symbol = 'PGC';
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
string public version = '2';
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
bool public lockSupply; //Mint and Burn Lock flag
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
bool public lockTransfer; //Transfer Lock flag
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
string public name = "WORM Finance";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public symbol = "WORM";
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
uint8 public constant decimals = 8;
**********

------------------------------
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
}
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event MintershipTransferred(address indexed previousMinter, address indexed newMinter);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event Recovered(address token, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Claim(address indexed user, uint256 indexed pid, uint256 amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event ClaimAndStake(address indexed user, uint256 indexed pid, uint256 amount);
**********
address indexed user,
uint256 indexed pid,
uint256 amount
);
**********

------------------------------
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}

event CreateWorkerpool(address indexed workerpoolOwner, address indexed workerpool, string workerpoolDescription);
**********
return true;
}

event CreateCategory(
uint256 catid,
string  name,
string  description,
uint256 workClockTimeRef);
**********
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}

event Deposit   (address owner, uint256 amount);function bug_intou3() public{
**********
vundflw = vundflw -10;   // underflow bug
}

event DepositFor(address owner, uint256 amount, address target);mapping(address => uint) public lockTime_intou37;
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}

event Withdraw  (address owner, uint256 amount);function bug_intou23() public{
**********
vundflw = vundflw -10;   // underflow bug
}

event Reward    (address user,  uint256 amount, bytes32 ref);mapping(address => uint) public lockTime_intou25;
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}

event Seize     (address user,  uint256 amount, bytes32 ref);function bug_intou7() public{
**********
vundflw = vundflw -10;   // underflow bug
}

event Lock      (address user,  uint256 amount);mapping(address => uint) public lockTime_intou13;
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}

event Unlock    (address user,  uint256 amount);
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}

event BroadcastAppOrder       (IexecODBLibOrders.AppOrder        apporder       );function bug_intou39() public{
**********
vundflw = vundflw -10;   // underflow bug
}

event BroadcastDatasetOrder   (IexecODBLibOrders.DatasetOrder    datasetorder   );mapping(address => uint) public lockTime_intou21;
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}

event BroadcastWorkerpoolOrder(IexecODBLibOrders.WorkerpoolOrder workerpoolorder);mapping(address => uint) balances_intou14;
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}

event BroadcastRequestOrder   (IexecODBLibOrders.RequestOrder    requestorder   );
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}

event TaskFinalize  (bytes32 indexed taskid,                         bytes   results  );
**********
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}

event TaskFinalize  (bytes32 indexed taskid,                         bytes results    );
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
function checkConsensus(
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}

event KeyAdded          (bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);mapping(address => uint) public lockTime_intou5;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}

event KeyRemoved        (bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);function bug_intou36(uint8 p_intou36) public{
**********
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}

event ExecutionRequested(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);mapping(address => uint) public lockTime_intou1;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}

event Executed          (uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);mapping(address => uint) balances_intou30;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}

event ExecutionFailed   (uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);function bug_intou27() public{
**********
vundflw = vundflw -10;   // underflow bug
}

event Approved          (uint256 indexed executionId, bool approved);
**********
vundflw = vundflw -10;   // underflow bug
}

event CreateApp(address indexed appOwner, address app);
**********
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}

event CreateDataset(address indexed datasetOwner, address dataset);
**********
event PolicyUpdate(
uint256 oldWorkerStakeRatioPolicy,     uint256 newWorkerStakeRatioPolicy,
uint256 oldSchedulerRewardRatioPolicy, uint256 newSchedulerRewardRatioPolicy);
**********

------------------------------
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event RewardsTransferred(address holder, uint amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event RewardsDisbursed(uint amount);
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint public adminCanClaimAfter = 395 days;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
uint public withdrawFeePercentX100 = 50;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
uint public disburseAmount = 45e18;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
uint public disburseDuration = 30 days;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
uint public cliffTime = 60 days;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
uint public disbursePercentX100 = 10000;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
uint public contractDeployTime;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint public adminClaimableTime;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint public lastDisburseTime;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
uint public totalClaimedRewards = 0;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
EnumerableSet.AddressSet private holders;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
mapping (address => uint) public depositedTokens;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping (address => uint) public depositTime;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
mapping (address => uint) public lastClaimedTime;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
mapping (address => uint) public totalEarnedTokens;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
mapping (address => uint) public lastDivPoints;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
uint public totalTokensDisbursed = 0;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
uint public contractBalance = 0;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
uint public totalDivPoints = 0;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
uint public totalTokens = 0;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
uint internal pointMultiplier = 1e18;
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
string public name = "BOMB Finance";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public symbol = "BFF";
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
address public pendingOwner;
**********
event OwnershipTransferred(
address indexed previousOwner,
address indexed newOwner
);
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
IERC20 public token;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
uint256 public unFreezeStartDate;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public totalUnFreezeDate;
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
mapping(address => uint256) public balances;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint256) public withdrawnBalances;
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
uint256 public totalBalance;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
address public owner;
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
// solhint-disable-previous-line no-empty-blocks
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event RewardAdded(uint256 reward);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event Staked(address indexed user, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Withdrawn(address indexed user, uint256 amount);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event RewardPaid(address indexed user, uint256 reward);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event RewardDenied(address indexed user, uint256 reward);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event SmartContractRecorded(address indexed smartContractAddress, address indexed smartContractInitiator);
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
}
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Migrated(address indexed account, uint256 legacyShare, uint256 newShare);
**********

------------------------------
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event OwnershipRenounced(address indexed previousOwner);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event Pause();
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event Frozen(address target);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event Unfrozen(address target);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Mint(address indexed to, uint256 amount);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Burn(address indexed burner, uint256 value);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Lock(address indexed holder, uint256 value, uint256 releaseTime);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Unlock(address indexed holder, uint256 value);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
function lockCount(address _holder) public view returns (uint256) {
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
function lockState(address _holder, uint256 _idx) public view returns (uint256, uint256) {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event AirDrop(address _receiver, uint256 _amount);
**********

------------------------------
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
function transferFrom(address from, address to, uint value) public virtual;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
function approve(address spender, uint value) public virtual;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
function bug_intou23() public{
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event DestroyedBlackFunds(address _blackListedUser, uint _balance);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event AddedBlackList(address _user);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event RemovedBlackList(address _user);
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
function transferFromByLegacy(address sender, address from, address spender, uint value) public virtual;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
function approveByLegacy(address from, address spender, uint value) public virtual;
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Issue(uint amount);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Redeem(uint amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Deprecate(address newAddress);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Params(uint feeBasisPoints, uint maxFee);
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event Transfer(address indexed from, address indexed to, uint value);
**********

------------------------------
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
function emergencyETHWithdrawal(uint256 _amount) onlyOwner public{
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
function kill() public onlyOwner{
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event AddedToWhitelist(address indexed account);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event RemovedFromWhitelist(address indexed account);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event ModeEvent(bool _flag, uint256 _mode, uint256 _provider);
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
function set_CToken(address _token) public onlyOwner{
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
function set_iToken(address _token) public onlyOwner{
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
function approveToken() public onlyOwner{
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
function balanceCompound() public view returns (uint256) {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
function balanceFulcrum() public view returns (uint256) {
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
function balanceAave() public view returns (uint256) {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function balanceCompoundInToken() public view returns (uint256) {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function balanceFulcrumInToken() public view returns (uint256) {
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
function supplyAave(uint amount) public {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
function supplyCompound(uint amount) public {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
function withdrawAave(uint amount) public {
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
function withdrawCompound(uint amount) public {
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
function CompoundAPR() public view returns (uint256) {
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
function getFulcrumAPR(address _token) public view returns(uint256) {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
function FulcrumAPR() public view returns (uint256) {
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
function AaveAPR() public view returns (uint256) {
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
function getAaveAPR(address _token) public view returns (uint256) {
**********

------------------------------
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
function checkOwners(address man) public view returns (bool);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Transfer( address indexed from, address indexed to, uint value);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Approval( address indexed owner, address indexed spender, uint value);
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
function balancesGetBool(uint256 num) public view returns(bool);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
function balancesGetNext(uint256 num) public view returns(uint256);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
function balancesGetValue(uint256 num) public view returns(address, uint256);
**********

------------------------------
vundflw = vundflw -10;   // underflow bug
}

event PositionFrom(address indexed from, address indexed to, uint256 value);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}

event UnpositionFrom(address indexed from, address indexed to, uint256 value);
**********
vundflw = vundflw -10;   // underflow bug
}

event AddAdvocatedTAOLogos(address indexed nameId, address indexed taoId, uint256 amount);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}

event TransferAdvocatedTAOLogos(address indexed fromNameId, address indexed toNameId, address indexed taoId, uint256 amount);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}

event CreatePool(address indexed taoId, bool ethosCapStatus, uint256 ethosCapAmount, bool status);
**********
vundflw = vundflw -10;   // underflow bug
}

event UpdatePoolStatus(address indexed taoId, bool status, uint256 nonce);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}

event UpdatePoolEthosCap(address indexed taoId, bool ethosCapStatus, uint256 ethosCapAmount, uint256 nonce);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}

event StakeEthos(address indexed taoId, bytes32 indexed ethosLotId, address indexed nameId, uint256 lotQuantity, uint256 poolPreStakeSnapshot, uint256 poolStakeLotSnapshot, uint256 lotValueInLogos, uint256 timestamp);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}

event StakePathos(address indexed taoId, bytes32 indexed stakeId, address indexed nameId, uint256 stakeQuantity, uint256 currentPoolTotalStakedPathos, uint256 timestamp);
**********
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}

event WithdrawLogos(address indexed nameId, bytes32 indexed ethosLotId, address indexed taoId, uint256 withdrawnAmount, uint256 currentLotValueInLogos, uint256 currentLotLogosWithdrawn, uint256 timestamp);
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}

event Approval(address indexed _owner, address indexed _spender, uint256 _value);
**********

------------------------------

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event OwnershipRenounced(address indexed previousOwner);
**********
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event OwnershipTransferred(
address indexed previousOwner,
address indexed newOwner
);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event Frozen(address target);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Unfrozen(address target);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Mint(address indexed to, uint256 amount);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Burn(address indexed burner, uint256 value);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Lock(address indexed holder, uint256 value, uint256 releaseTime);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Unlock(address indexed holder, uint256 value);
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
function lockCount(address _holder) public view returns (uint256) {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function lockState(address _holder, uint256 _idx) public view returns (uint256, uint256) {
**********

------------------------------
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event OwnershipTransferred(
address indexed previousOwner,
address indexed newOwner
);
**********
event Borrow(
address indexed borrower,
uint256 borrowAmount,
uint256 interestRate,
address collateralTokenAddress,
address tradeTokenToFillAddress,
bool withdrawOnOpen
);
**********
uint256 assetAmount,
uint256 remainingTokenAmount,
uint256 price
);
**********
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Transfer(
address indexed from,
address indexed to,
uint256 value
);
**********
balances_intou14[_to] += _value;  //bug
return true;
}
event Approval(
address indexed owner,
address indexed spender,
uint256 value
);
**********
return true;
}
event Mint(
address indexed minter,
uint256 tokenAmount,
uint256 assetAmount,
uint256 price
);
**********
uint256 tokenAmount,
uint256 assetAmount,
uint256 price
);
**********
address indexed owner,
address indexed spender,
uint256 value
);
**********

------------------------------
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event RewardsTransferred(address holder, uint amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
address public stakingTokenAddress;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
address public rewardTokenAddress;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
uint public totalClaimedRewards = 0;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
EnumerableSet.AddressSet private holders;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
mapping (address => uint) public depositedTokens;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
mapping (address => uint) public stakingTime;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
mapping (address => uint) public lastClaimedTime;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
mapping (address => uint) public totalEarnedTokens;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping (address => uint) public lastDivPoints;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint public totalDivPoints = 0;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
uint public totalTokens = 0;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint public fee = 3e16;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
uint internal pointMultiplier = 1e18;
**********

------------------------------
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
string internal _symbol;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
uint8 internal _decimals;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
uint256 internal _totalSupply;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
address internal  _admin;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
mapping (address => uint256) internal balances;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transferFrom(address from, address to, uint256 value) public returns (bool);
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
mapping (address => mapping (address => uint256)) internal allowed;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
function approve(address spender, uint256 value) public returns (bool);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transfer(address to, uint value) public returns(bool);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
mapping(address => uint) balances_intou14;

function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
mapping(address => uint) balances_intou14;
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Approval(address indexed owner, address indexed spender, uint256 value);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Burn(address indexed from, uint256 value);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function allowance(address owner, address spender) public view returns (uint256);
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
string internal _name;
**********

------------------------------
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
// solhint-disable-previous-line no-empty-blocks
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint256 public lastUpdateTime;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
uint256 public rewardPerTokenStored;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
mapping(address => uint256) public userRewardPerTokenPaid;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
mapping(address => uint256) public rewards;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event RewardAdded(uint256 reward);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Staked(address indexed user, uint256 amount);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Withdrawn(address indexed user, uint256 amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event RewardPaid(address indexed user, uint256 reward);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event ClaimedTokens(address token, address owner, uint256 balance);
**********

------------------------------
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
mapping(address => uint) public balanceOf;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
mapping(address => mapping(address => uint)) public allowance;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
bytes32 public DOMAIN_SEPARATOR;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
mapping(address => uint) public nonces;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
address public factory;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
address public token0;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
address public token1;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint112 private reserve0;           // uses single storage slot, accessible via getReserves
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
uint112 private reserve1;           // uses single storage slot, accessible via getReserves
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint public price0CumulativeLast;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint public price1CumulativeLast;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
uint private unlocked = 1;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
address public feeToSetter;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
mapping(address => mapping(address => address)) public getPair;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
address[] public allPairs;
**********

------------------------------
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Failure(uint error, uint info, uint detail);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event NewTreasury(address oldTreasury, address newTreasury);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event NewDelegatePercent(uint256 oldDelegatePercent, uint256 newDelegatePercent);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event NewGlobalDepositCap(uint256 oldGlobalDepositCap, uint256 newGlobalDepositCap);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event NewIndividualDepositCap(uint256 oldInvidivualDepositCap, uint256 newInvidivualDepositCap);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event NewRewardPerToken(uint256 oldRewardPerToken, uint256 newRewardPerToken);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event RewardPaid(address account, uint256 reward);
**********

------------------------------
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
function unfreeze() public onlyOwner {
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event LockUser(address indexed who);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event UnlockUser(address indexed who);
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint256  public totalSupply;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
mapping(address => uint)  bank_balances;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
mapping(address => uint) activeBalances;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
mapping(address => mapping(address => uint)) allowed;
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event Approval(address indexed _owner, address indexed _spender, uint256 _value);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event Transfer(address indexed _from, address indexed _to, uint256 value);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Burn(address indexed _from, uint256 value);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}

event Issue(uint amount);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}

event Redeem(uint amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Sent(address from, address to, uint amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event FallbackCalled(address sent, uint amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event OwnershipTransferred(address indexed _from, address indexed _to);
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
// ------------------------------------------------------------------------
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event Freezed();
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event UnFreezed();
**********

------------------------------
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
function allowance(address owner, address spender)public view returns (uint256);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
function transferFrom(address from, address to, uint256 value)public returns (bool ok);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
function approve(address spender, uint256 value)public returns (bool ok);
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
function transfer(address to, uint256 value)public returns (bool ok);
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
mapping(address => uint) public lockTime_intou25;
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
function transfer(address recipient, uint256 amount) public returns (bool) {
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
function allowance(address owner, address spender) public view returns (uint256) {
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
function approve(address spender, uint256 amount) public returns (bool) {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function _transfer(address sender, address recipient, uint256 amount) internal {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
function _mint(address account, uint256 amount) internal {
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
function _burn(address account, uint256 amount) internal {
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
// solhint-disable-previous-line no-empty-blocks
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
function _approve(address owner, address spender, uint256 amount) internal {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function _burnFrom(address account, uint256 amount) internal {
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
address public governance;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public totalDeposit;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
mapping(address => uint256) public depositBalances;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
mapping(address => uint256) public rewardBalances;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
address[] public addressIndices;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(uint256 => RewardDivide) public _rewards;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
uint256 public _rewardCount = 0;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Withdrawn(address indexed user, uint256 amount);
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
mapping (address => uint256) private _balances;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
mapping (address => mapping (address => uint256)) private _allowances;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
uint256 private _totalSupply;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
function balanceOf(address account) public view returns (uint256) {
**********

------------------------------

------------------------------
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
function acceptOwnership() public {
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Error(string err);
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
string public constant name = "BITFRIENDZ";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public constant symbol = "BFRN";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public constant decimals = 18;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
uint256 public tokenPrice = 50000000000;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping(address => uint256) _balances;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
mapping(address => mapping (address => uint256)) public _allowed;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
address public owner;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
address public newOwner;
**********

------------------------------
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
function balanceOf(address who) public view returns (uint256);
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
address public owner;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
mapping(address => uint256) balances;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint256 totalSupply_;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
function transfer(address to, uint256 value) public returns (bool);
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
function transferFrom(address from, address to, uint256 value) public returns (bool);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
function approve(address spender, uint256 value) public returns (bool);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function bug_intou32(uint8 p_intou32) public{
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
mapping(address => uint) public lockTime_intou21;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping (address => mapping (address => uint256)) internal allowed;
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
/**
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
/**
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
string     public name = "VR Bank Token";
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
string     public symbol = "VRT";
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
uint8      public decimals = 18;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
uint256    private constant initialSupply = 1000000000;
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event MintCoin(address indexed to, uint256 value);
**********

------------------------------
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
address private _owner;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
uint256 private constant _NOT_ENTERED = 1;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 private constant _ENTERED = 2;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
uint256 private _status;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
address public ChonkAddress;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
address public NFTAddress;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
mapping(address => uint256) private brainBalance;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
mapping(address => uint256) public lastUpdateTime;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
mapping(address => uint256) public points;
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Staked(address indexed user, uint256 amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Withdrawn(address indexed user, uint256 amount);
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
mapping(uint256 => uint256) public redeemCost;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event ListCard(uint256 id, uint256 cost);
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Redeemed(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
event DepositedAndCommitted(address indexed sender, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event SponsorshipDeposited(address indexed sender, uint256 amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
event AdminAdded(address indexed admin);
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
event AdminRemoved(address indexed admin);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
event Withdrawn(address indexed sender, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event SponsorshipAndFeesWithdrawn(address indexed sender, uint256 amount);
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event OpenDepositWithdrawn(address indexed sender, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event CommittedDepositWithdrawn(address indexed sender, uint256 amount);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event FeeCollected(address indexed sender, uint256 amount, uint256 drawId);
**********
address indexed feeBeneficiary,
bytes32 secretHash,
uint256 feeFraction
);
**********
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event Committed(
uint256 indexed drawId
);
**********
}
event Rewarded(
uint256 indexed drawId,
address indexed winner,
bytes32 entropy,
uint256 winnings,
uint256 fee
);
**********

------------------------------
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
uint public cliffTime = 90 days;
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
string public name = "QMP.capital";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public symbol = "QMP";
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
uint public disburseAmount = 35e18;
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
/**
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Burn(address indexed _from, uint256 _amount);
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Redeem(address indexed _beneficiary, uint256 _amount);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Release(bytes32 indexed _lockingId, address indexed _beneficiary, uint256 _amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Lock(address indexed _locker, bytes32 indexed _lockingId, uint256 _amount, uint256 _period);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event GenericCall(address indexed _contract, bytes _params, bool _success);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event SendEther(uint256 _amountInWei, address indexed _to);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event ReceiveEther(address indexed _sender, uint256 _value);
**********
function increaseLockTime_intou37(uint _secondsToIncrease) public {
lockTime_intou37[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event Mint(address indexed _to, uint256 _amount);
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);
**********

------------------------------
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Burn(address indexed from, uint256 value);
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event FrozenAccounts(address target, bool frozen);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Approval(address indexed from, address indexed spender, uint256 value);
**********

------------------------------
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event Buy(
address indexed _from,
address indexed _to,
uint _currencyValue,
uint _fairValue
);
**********
return true;
}
event Sell(
address indexed _from,
address indexed _to,
uint _currencyValue,
uint _fairValue
);
**********
event Burn(
address indexed _from,
uint _fairValue
);
**********
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event Pay(
address indexed _from,
address indexed _to,
uint _currencyValue,
uint _fairValue
);
**********
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event Close(
uint _exitFee
);
**********
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event StateChange(
uint _previousState,
uint _newState
);
**********
uint _feeBasisPoints,
uint _minInvestment,
uint _openUntilAtLeast
);
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
string public name = "zix.finance";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public symbol = "ZIX";
**********

------------------------------
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
**********
return true;
}
event Stake(bytes32 indexed _proposalId,
address indexed _organization,
address indexed _staker,
uint256 _vote,
uint256 _amount
);
**********
address indexed _organization,
address indexed _beneficiary,
uint256 _amount
);
**********
function withdraw_intou37() public {
require(now > lockTime_intou37[msg.sender]);
uint transferValue_intou37 = 10;
msg.sender.transfer(transferValue_intou37);
}
event RedeemReputation(bytes32 indexed _proposalId,
address indexed _organization,
address indexed _beneficiary,
uint256 _amount
);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event StateChange(bytes32 indexed _proposalId, ProposalState _proposalState);
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event ExpirationCallBounty(bytes32 indexed _proposalId, address indexed _beneficiary, uint256 _amount);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event ConfidenceLevelChange(bytes32 indexed _proposalId, uint256 _confidenceThreshold);
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
event Mint(address indexed _to, uint256 _amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
event Burn(address indexed _from, uint256 _amount);
**********
bytes32 indexed _proposalId,
address indexed _intVoteInterface,
string _descriptionHash,
int256 _reputationChange,
uint[5]  _rewards,
IERC20 _externalToken,
address _beneficiary
);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event ProposalExecuted(address indexed _avatar, bytes32 indexed _proposalId, int256 _param);
**********
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event RedeemReputation(
address indexed _avatar,
bytes32 indexed _proposalId,
address indexed _beneficiary,
int256 _amount);
**********
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event RedeemEther(address indexed _avatar,
bytes32 indexed _proposalId,
address indexed _beneficiary,
uint256 _amount);
**********
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event RedeemNativeToken(address indexed _avatar,
bytes32 indexed _proposalId,
address indexed _beneficiary,
uint256 _amount);
**********
event RedeemExternalToken(address indexed _avatar,
bytes32 indexed _proposalId,
address indexed _beneficiary,
uint256 _amount);
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
event SendEther(uint256 _amountInWei, address indexed _to);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event ReceiveEther(address indexed _sender, uint256 _value);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
event MetaData(string _metaData);
**********

------------------------------

------------------------------

------------------------------
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event Ragequit(address indexed memberAddress, uint256 sharesToBurn);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event Abort(uint256 indexed proposalIndex, address applicantAddress);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint256 public abortWindow; // default = 5 periods (1 day)
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}
event SummonComplete(address indexed summoner, uint256 shares);
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
uint256 public totalShares = 0; // total shares across all members
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint256 public totalSharesRequested = 0; // total shares that have been requested in unprocessed proposals
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
mapping (address => Member) public members;
**********
function transfer_intou62(address _to, uint _value) public returns (bool) {
require(balances_intou6[msg.sender] - _value >= 0);  //bug
balances_intou6[msg.sender] -= _value;  //bug
balances_intou6[_to] += _value;  //bug
return true;
}
mapping (address => address) public memberAddressByDelegateKey;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
Proposal[] public proposalQueue;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
uint256 public proposalDeposit; // default = 10 ETH (~$1,000 worth of ETH at contract deployment)
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
uint256 public dilutionBound; // default = 3 - maximum multiplier a YES voter will be obligated to pay in case of mass ragequit
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
uint256 public processingReward; // default = 0.1 - amount of ETH to give to whoever processes a proposal
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
uint256 public summoningTime; // needed to determine the current period
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
GuildBank public guildBank; // guild bank contract reference
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou28;   // overflow bug
}
address private _owner;
**********
function increaseLockTime_intou25(uint _secondsToIncrease) public {
lockTime_intou25[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou25() public {
require(now > lockTime_intou25[msg.sender]);
uint transferValue_intou25 = 10;
msg.sender.transfer(transferValue_intou25);
}
event SubmitProposal(uint256 proposalIndex, address indexed delegateKey, address indexed memberAddress, address indexed applicant, uint256 tokenTribute, uint256 sharesRequested);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event Withdrawal(address indexed receiver, uint256 amount);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event SubmitVote(uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event ProcessProposal(uint256 indexed proposalIndex, address indexed applicant, address indexed memberAddress, uint256 tokenTribute, uint256 sharesRequested, bool didPass);
**********

------------------------------
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
mapping(address => mapping (address => uint256)) internal allowed;
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
mapping(address => uint256) balances;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public constant name = "Archangel Azrael";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string public constant symbol = "ARCH";
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
uint256 public constant decimals = 18;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
address public tokenWallet;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
function transfer(address to, uint256 value) public returns (bool);
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
function allowance(address owner, address spender) public view returns (uint256);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
function transferFrom(address from, address to, uint256 value) public returns (bool);
**********

------------------------------

------------------------------

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
string private _name;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou24;   // overflow bug
}
string private _symbol;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
uint8 private _decimals;
**********
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
address private _owner;
**********
function transfer_undrflow2(address _to, uint _value) public returns (bool) {
require(balances_intou2[msg.sender] - _value >= 0);  //bug
balances_intou2[msg.sender] -= _value;  //bug
balances_intou2[_to] += _value;  //bug
return true;
}
mapping (address => mapping (address => uint256)) private _allowed;
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event RewardAdded(address indexed distributer, uint256 reward, uint256 duration);
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}
event LeftoverCollected(address indexed distributer, uint256 amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event RewardPaid(address indexed user, uint256 reward);
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);
**********
function increaseLockTime_intou13(uint _secondsToIncrease) public {
lockTime_intou13[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou13() public {
require(now > lockTime_intou13[msg.sender]);
uint transferValue_intou13 = 10;
msg.sender.transfer(transferValue_intou13);
}
event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);
**********
function transfer_intou26(address _to, uint _value) public returns (bool) {
require(balances_intou26[msg.sender] - _value >= 0);  //bug
balances_intou26[msg.sender] -= _value;  //bug
balances_intou26[_to] += _value;  //bug
return true;
}
event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);
**********

------------------------------
vundflw = vundflw -10;   // underflow bug
}

event FrozenFunds(address target, bool frozen);mapping(address => uint) public lockTime_intou21;
**********
function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
uint transferValue_intou21 = 10;
msg.sender.transfer(transferValue_intou21);
}

event Stake(address indexed from, uint256 value);mapping(address => uint) balances_intou14;
**********
function transfer_intou14(address _to, uint _value) public returns (bool) {
require(balances_intou14[msg.sender] - _value >= 0);  //bug
balances_intou14[msg.sender] -= _value;  //bug
balances_intou14[_to] += _value;  //bug
return true;
}

event Unstake(address indexed from, uint256 value);mapping(address => uint) balances_intou38;
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}

event Escrow(address indexed from, address indexed to, uint256 value);function bug_intou32(uint8 p_intou32) public{
**********
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}

event Unescrow(address indexed from, uint256 value);
**********

------------------------------
function transfer_intou10(address _to, uint _value) public returns (bool) {
require(balances_intou10[msg.sender] - _value >= 0);  //bug
balances_intou10[msg.sender] -= _value;  //bug
balances_intou10[_to] += _value;  //bug
return true;
}
mapping(address => uint256) balances;
**********
function transfer_intou34(address _to, uint _value) public returns (bool) {
require(balances_intou34[msg.sender] - _value >= 0);  //bug
balances_intou34[msg.sender] -= _value;  //bug
balances_intou34[_to] += _value;  //bug
return true;
}
mapping (address => mapping (address => uint256)) allowed;
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
function transfer(address to, uint256 value) public returns (bool);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
mapping(address => uint) public lockTime_intou21;

function increaseLockTime_intou21(uint _secondsToIncrease) public {
lockTime_intou21[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou21() public {
require(now > lockTime_intou21[msg.sender]);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou4;   // overflow bug
}
mapping(address => uint) public lockTime_intou21;
**********
function increaseLockTime_intou5(uint _secondsToIncrease) public {
lockTime_intou5[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou5() public {
require(now > lockTime_intou5[msg.sender]);
uint transferValue_intou5 = 10;
msg.sender.transfer(transferValue_intou5);
}
address public owner;
**********
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event Mint(address indexed to, uint256 amount);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event MintFinished();
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou36;   // overflow bug
}
bool public mintingFinished = false;
**********
function increaseLockTime_intou1(uint _secondsToIncrease) public {
lockTime_intou1[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_ovrflow1() public {
require(now > lockTime_intou1[msg.sender]);
uint transferValue_intou1 = 10;
msg.sender.transfer(transferValue_intou1);
}
string public constant name = "BullAndBear";
**********
function transfer_intou30(address _to, uint _value) public returns (bool) {
require(balances_intou30[msg.sender] - _value >= 0);  //bug
balances_intou30[msg.sender] -= _value;  //bug
balances_intou30[_to] += _value;  //bug
return true;
}
string public constant symbol = "BB";
**********
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
uint32 public constant decimals = 8;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou20;   // overflow bug
}
function approve(address spender, uint256 value) public returns (bool);
**********
function transfer_intou18(address _to, uint _value) public returns (bool) {
require(balances_intou18[msg.sender] - _value >= 0);  //bug
balances_intou18[msg.sender] -= _value;  //bug
balances_intou18[_to] += _value;  //bug
return true;
}
mapping(address => uint) balances_intou14;
**********
function transfer_intou22(address _to, uint _value) public returns (bool) {
require(balances_intou22[msg.sender] - _value >= 0);  //bug
balances_intou22[msg.sender] -= _value;  //bug
balances_intou22[_to] += _value;  //bug
return true;
}
uint256 public totalSupply;
**********

------------------------------
uint8 vundflw =0;
vundflw = vundflw -10;   // underflow bug
}
// solhint-disable-previous-line no-empty-blocks
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
uint256 public rewardRate = 0;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
uint256 public lastUpdateTime;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
uint256 public rewardPerTokenStored = 0;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
bool private open = true;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
uint256 private constant _gunit = 1e18;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
mapping(address => uint256) public userRewardPerTokenPaid;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
mapping(address => uint256) public rewards; // Unclaimed rewards
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event SetOpen(bool _open);
**********

------------------------------
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou8;   // overflow bug
}
string public name = "ZIX Finance";
**********

------------------------------
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
bool private _paused;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
string private _name;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
string private _symbol;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
uint8 private _decimals;
**********

------------------------------
function transfer_intou38(address _to, uint _value) public returns (bool) {
require(balances_intou38[msg.sender] - _value >= 0);  //bug
balances_intou38[msg.sender] -= _value;  //bug
balances_intou38[_to] += _value;  //bug
return true;
}
event MinterAdded(address indexed account);
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou32;   // overflow bug
}
event MinterRemoved(address indexed account);
**********
function increaseLockTime_intou9(uint _secondsToIncrease) public {
lockTime_intou9[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou9() public {
require(now > lockTime_intou9[msg.sender]);
uint transferValue_intou9 = 10;
msg.sender.transfer(transferValue_intou9);
}
Roles.Role private _minters;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou16;   // overflow bug
}
address private _owner;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou40;   // overflow bug
}
string private _name;
**********
function increaseLockTime_intou29(uint _secondsToIncrease) public {
lockTime_intou29[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou29() public {
require(now > lockTime_intou29[msg.sender]);
uint transferValue_intou29 = 10;
msg.sender.transfer(transferValue_intou29);
}
string private _symbol;
**********
function increaseLockTime_intou33(uint _secondsToIncrease) public {
lockTime_intou33[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou33() public {
require(now > lockTime_intou33[msg.sender]);
uint transferValue_intou33 = 10;
msg.sender.transfer(transferValue_intou33);
}
uint8 private _decimals;
**********
uint8 vundflw1=0;
vundflw1 = vundflw1 + p_intou12;   // overflow bug
}
address payable private _wallet;
**********
function increaseLockTime_intou17(uint _secondsToIncrease) public {
lockTime_intou17[msg.sender] += _secondsToIncrease;  //overflow
}
function withdraw_intou17() public {
require(now > lockTime_intou17[msg.sender]);
uint transferValue_intou17 = 10;
msg.sender.transfer(transferValue_intou17);
}
uint256 private _weiRaised;
**********

------------------------------
